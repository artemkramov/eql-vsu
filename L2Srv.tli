// Created by Microsoft (R) C/C++ Compiler Version 12.00.9782.0 (970ce46f).
//
// L2Srv.tli
//
// Wrapper implementations for Win32 type library L2Srv.tlb
// compiler-generated file created 01/05/05 at 17:26:27 - DO NOT EDIT!

#pragma once

//
// interface IHcStateEvents wrapper method implementations
//

inline HRESULT IHcStateEvents::Connected ( struct _idlSerNum SerNum, unsigned long LogNum ) {
    HRESULT _hr = raw_Connected(SerNum, LogNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcStateEvents::OnOff ( long bOn ) {
    HRESULT _hr = raw_OnOff(bOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcStateEvents::Fatal ( ) {
    HRESULT _hr = raw_Fatal();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcStateEvents::Arrive ( ) {
    HRESULT _hr = raw_Arrive();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcCashStateEvents wrapper method implementations
//

inline HRESULT IHcCashStateEvents::Business ( long position, long sesscount, long objcount ) {
    HRESULT _hr = raw_Business(position, sesscount, objcount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashStateEvents::Conflict ( long position, unsigned long savedret ) {
    HRESULT _hr = raw_Conflict(position, savedret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcStatisticsEvents wrapper method implementations
//

inline HRESULT IHcStatisticsEvents::Changed ( long position ) {
    HRESULT _hr = raw_Changed(position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcSession wrapper method implementations
//

inline HRESULT IHcSession::Read ( unsigned char * pv, unsigned long cb, unsigned long * pcbRead, unsigned long tmo ) {
    HRESULT _hr = raw_Read(pv, cb, pcbRead, tmo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcSession::Write ( unsigned char * pv, unsigned long cb, unsigned long * pcbWritten ) {
    HRESULT _hr = raw_Write(pv, cb, pcbWritten);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcSession::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcCash wrapper method implementations
//

inline HRESULT IHcCash::CreateSession ( struct IHcSession * * psession ) {
    HRESULT _hr = raw_CreateSession(psession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCash::Perf ( struct _idlASLAV_Profile * PerfData ) {
    HRESULT _hr = raw_Perf(PerfData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcCashes wrapper method implementations
//

inline HRESULT IHcCashes::Count ( unsigned long * pCount ) {
    HRESULT _hr = raw_Count(pCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes::Item ( unsigned long Index, struct IHcCash * * pcash ) {
    HRESULT _hr = raw_Item(Index, pcash);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcCashes2 wrapper method implementations
//

inline HRESULT IHcCashes2::Count ( unsigned long * pCount ) {
    HRESULT _hr = raw_Count(pCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes2::Item ( struct IHcCash * * pcash ) {
    HRESULT _hr = raw_Item(pcash);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes2::AutoDetect ( ) {
    HRESULT _hr = raw_AutoDetect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes2::Move ( long position ) {
    HRESULT _hr = raw_Move(position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes2::Business ( long * sesscount, long * objcount ) {
    HRESULT _hr = raw_Business(sesscount, objcount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline unsigned long IHcCashes2::Saved ( ) {
    unsigned long _result;
    HRESULT _hr = raw_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IHcCashes2::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes2::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes2::Insert ( unsigned char Com, unsigned char Adr, struct tagcash_param * param ) {
    HRESULT _hr = raw_Insert(Com, Adr, param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes2::First ( ) {
    HRESULT _hr = raw_First();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes2::Next ( ) {
    HRESULT _hr = raw_Next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes2::GetParameters ( unsigned char * Com, unsigned char * Adr, struct tagcash_param * param ) {
    HRESULT _hr = raw_GetParameters(Com, Adr, param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHcCashes2::SetParameters ( unsigned char Com, unsigned char Adr, struct tagcash_param * param ) {
    HRESULT _hr = raw_SetParameters(Com, Adr, param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcCreateSessionLog wrapper method implementations
//

inline HRESULT IHcCreateSessionLog::CreateSession ( unsigned long LogNum, struct IHcSession * * psession ) {
    HRESULT _hr = raw_CreateSession(LogNum, psession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcCreateSessionLog2 wrapper method implementations
//

inline HRESULT IHcCreateSessionLog2::CreateSession ( unsigned long LogNum, IUnknown * sink, struct IHcSession * * psession ) {
    HRESULT _hr = raw_CreateSession(LogNum, sink, psession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcCreateSessionFis wrapper method implementations
//

inline HRESULT IHcCreateSessionFis::CreateSession ( unsigned char Com, unsigned char Adr, struct tagcash_param * param, struct IHcSession * * psession ) {
    HRESULT _hr = raw_CreateSession(Com, Adr, param, psession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcCreateSessionFis2 wrapper method implementations
//

inline HRESULT IHcCreateSessionFis2::CreateSession ( unsigned char Com, unsigned char Adr, struct tagcash_param * param, IUnknown * sink, struct IHcSession * * psession ) {
    HRESULT _hr = raw_CreateSession(Com, Adr, param, sink, psession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHcPositionEvents wrapper method implementations
//

inline HRESULT IHcPositionEvents::PositionChanged ( long position ) {
    HRESULT _hr = raw_PositionChanged(position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
